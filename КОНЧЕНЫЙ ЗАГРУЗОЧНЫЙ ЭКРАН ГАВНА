#include <SFML/Graphics.hpp>
#include <iostream>

using namespace sf;
using namespace std;
// Определение структуры для хранения состояния игры
struct GameState {
    enum class State {
        MainMenu,
        Game
    };

    State currentState;
};


// Функция для отрисовки главного меню
void drawMainMenu(sf::RenderWindow& window, sf::Font& font) {
    sf::Text playText("Play", font, 48);
    playText.setFillColor(sf::Color::White);
    playText.setStyle(sf::Text::Bold);
    playText.setPosition(350, 250); // Установка позиции кнопки "играть"

    sf::Text exitText("Quit", font, 48);
    exitText.setFillColor(sf::Color::White);
    exitText.setStyle(sf::Text::Bold);
    exitText.setPosition(350, 300); // Установка позиции кнопки "выйти"


    window.draw(playText);
    window.draw(exitText);

}

// Функция для обработки нажатий на кнопки в главном меню
void handleMainMenuEvents(sf::RenderWindow& window, GameState& gameState) {
    sf::Event event;
    while (window.pollEvent(event)) {
        if (event.type == sf::Event::Closed)
            window.close();

        // Обработка события нажатия кнопки мыши
        if (event.type == sf::Event::MouseButtonPressed) {
            if (event.mouseButton.button == sf::Mouse::Left) {
                // Проверка, был ли клик на кнопке "играть"
                if (window.mapPixelToCoords(sf::Vector2i(event.mouseButton.x, event.mouseButton.y)).x >= 350 &&
                    window.mapPixelToCoords(sf::Vector2i(event.mouseButton.x, event.mouseButton.y)).x <= 350 + 100 &&
                    window.mapPixelToCoords(sf::Vector2i(event.mouseButton.x, event.mouseButton.y)).y >= 250 &&
                    window.mapPixelToCoords(sf::Vector2i(event.mouseButton.x, event.mouseButton.y)).y <= 250 + 30)
                {
                    // Переключение состояния на игру
                    gameState.currentState = GameState::State::Game;
                }

                // Проверка, был ли клик на кнопке "выйти"
                else if (window.mapPixelToCoords(sf::Vector2i(event.mouseButton.x, event.mouseButton.y)).x >= 360 &&
                    window.mapPixelToCoords(sf::Vector2i(event.mouseButton.x, event.mouseButton.y)).x <= 360 + 100 &&
                    window.mapPixelToCoords(sf::Vector2i(event.mouseButton.x, event.mouseButton.y)).y >= 300 &&
                    window.mapPixelToCoords(sf::Vector2i(event.mouseButton.x, event.mouseButton.y)).y <= 300 + 30)
                {
                    window.close();
                }
            }
        }
    }
}

// Функция для отрисовки игры
void drawGame(sf::RenderWindow& window) {
    // Здесь вы можете добавить код для отрисовки сцены игры
    window.clear(sf::Color::Black);
    // Отрисовка игровых объектов
    window.display();

}

int main()
{
    // Создание окна
    sf::RenderWindow window(sf::VideoMode(800, 600), "Main Menu");
    
    Texture texture;
    if (!texture.loadFromFile("D:/Clicker/SFML Clicker/пещера.png")) {
        return 2; // В случае ошибки загрузки фона
    }
    Sprite background(texture);  // Создание спрайта с фоном
    background.setScale(0.52f, 0.48f);
  

    // Создание шрифта
    sf::Font font;
    if (!font.loadFromFile("JollyLodger.ttf")) {
        std::cerr << "Failed to load font file!" << std::endl;
        return 1;
    }


    // Создание объекта для хранения состояния игры
    GameState gameState;
    gameState.currentState = GameState::State::MainMenu;

    // Основной цикл программы
    while (window.isOpen())
    {
        // Обработка событий в зависимости от текущего состояния игры
        if (gameState.currentState == GameState::State::MainMenu) {
            handleMainMenuEvents(window, gameState);

            // Очистка экрана и отрисовка главного меню
            window.clear();
            drawMainMenu(window, font);
            window.display();
        }
    }
}



C++ и SFML - КАКШЕЧНЫЙ КАЛ 
